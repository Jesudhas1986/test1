OpenShift BuildConfig, DeploymentConfig, and Template
✨ 1. Introduction
OpenShift, built on Kubernetes, provides several higher-level resources to simplify application builds and deployments. Among these, BuildConfig, DeploymentConfig, and Template are key components for implementing a CI/CD pipeline within the OpenShift ecosystem.

This document explains each resource, their purpose, workflow, and how they work together.

🏗️ 2. BuildConfig
📌 What is BuildConfig?
A BuildConfig (BC) in OpenShift defines how source code is converted into a container image. It is an OpenShift-specific resource that automates the process of building container images from source.

Unlike plain Kubernetes, OpenShift integrates a native build system:

Pulls your source code from Git or another repository.

Combines it with a builder image (e.g., Node.js, Python, or custom).

Produces a new container image and pushes it to the internal image registry.

✅ Key Features
Source Strategy: Build from source code using a builder image.

Docker Strategy: Build using a custom Dockerfile.

Pipeline Strategy: Build using Jenkins pipeline.

Triggers:

GitHub/Generic Webhooks – start builds when code changes.

Image Change Trigger – start builds when base image updates.

Config Change Trigger – start builds when BC is updated.

📋 Sample BuildConfig YAML
yaml
Copy
Edit
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  name: my-app-build
spec:
  source:
    git:
      uri: https://github.com/example-org/my-app.git
  strategy:
    sourceStrategy:
      from:
        kind: ImageStreamTag
        name: nodejs:16
  output:
    to:
      kind: ImageStreamTag
      name: my-app:latest
  triggers:
    - type: GitHub
      github:
        secret: mysecret
    - type: ConfigChange
🔧 Build Workflow
Developer pushes code to Git.

Webhook triggers BuildConfig.

OpenShift builds a new image and stores it in the internal registry.

Image is ready for deployment.

🚀 3. DeploymentConfig
📌 What is DeploymentConfig?
A DeploymentConfig (DC) in OpenShift defines how an application is deployed and managed.
It is similar to a Kubernetes Deployment but with some OpenShift‑specific enhancements, like image change triggers and built‑in rollbacks.

✅ Key Features
Controls replica count of pods.

Triggers a new rollout when:

A new image is pushed to the image stream.

The DeploymentConfig itself is updated.

Supports automatic rollbacks and hooks (pre, mid, post).

📋 Sample DeploymentConfig YAML
yaml
Copy
Edit
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  name: my-app
spec:
  replicas: 3
  selector:
    app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - name: my-app
        image: image-registry.openshift-image-registry.svc:5000/myproj/my-app:latest
        ports:
        - containerPort: 8080
  triggers:
    - type: ConfigChange
    - type: ImageChange
🔧 Deployment Workflow
DeploymentConfig monitors an ImageStream.

When BuildConfig pushes a new image to the ImageStream, the DC triggers a rollout.

Old pods are scaled down, and new pods with the updated image are created.

✨ Deployment Strategies
Rolling (default): Gradually replace pods.

Recreate: Kill all old pods, then create new ones.

Custom: Define custom deployment logic.

📐 4. Template
📌 What is a Template?
A Template in OpenShift is a way to define and package multiple resources (like BuildConfig, DeploymentConfig, Service, Route) together with parameterization.

Instead of creating resources one by one, you can create a single Template that includes all the YAML definitions.
You can then process the template with parameters to generate the actual objects.

✅ Key Features
Contains multiple OpenShift/Kubernetes objects.

Supports parameters to customize deployments.

Reusable across projects and teams.

Can be stored in a Git repository or OpenShift catalog.

📋 Sample Template YAML
yaml
Copy
Edit
apiVersion: v1
kind: Template
metadata:
  name: my-app-template
parameters:
- name: APP_NAME
  required: true
- name: GIT_REPO
  required: true
objects:
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    name: "${APP_NAME}-build"
  spec:
    source:
      git:
        uri: "${GIT_REPO}"
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: nodejs:16
    output:
      to:
        kind: ImageStreamTag
        name: "${APP_NAME}:latest"
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    name: "${APP_NAME}"
  spec:
    replicas: 2
    selector:
      app: "${APP_NAME}"
    template:
      metadata:
        labels:
          app: "${APP_NAME}"
      spec:
        containers:
        - name: "${APP_NAME}"
          image: "image-registry.openshift-image-registry.svc:5000/myproj/${APP_NAME}:latest"
          ports:
          - containerPort: 8080
🔧 How to Use a Template
Create the template YAML and apply it:

bash
Copy
Edit
oc create -f my-app-template.yaml
Process the template with parameters:

bash
Copy
Edit
oc process my-app-template -p APP_NAME=myapp -p GIT_REPO=https://github.com/example/repo.git | oc apply -f -
🔗 5. How They Work Together
Step	Resource	Description
1	BuildConfig	Defines how source code is built into an image.
2	ImageStream (auto-created)	Stores built image and tracks changes.
3	DeploymentConfig	Deploys pods using the image from the ImageStream.
4	Template	Bundles BuildConfig, DeploymentConfig, and other objects for easy reuse.

Example workflow:

You push code → BuildConfig builds image → ImageStream updated → DeploymentConfig triggers rollout → Pods updated.

All the above can be packaged in a Template for repeatable deployments.

✅ 6. Best Practices
✔️ Keep secrets (like passwords) out of BuildConfig/Template. Use Secrets and mount them.
✔️ Use parameterized Templates for reusable deployments.
✔️ Enable image change triggers in DeploymentConfig for automated rollouts.
✔️ Version control your YAMLs (GitOps approach).
✔️ Monitor builds and deployments using oc get builds, oc get pods, and OpenShift Web Console.

📖 7. Conclusion
BuildConfig, DeploymentConfig, and Template are powerful OpenShift constructs that enable an integrated CI/CD workflow.

BuildConfig → Builds images from your source.

DeploymentConfig → Deploys and manages pods.

Template → Bundles resources with parameters for reusability.

Together, they make application delivery in OpenShift fast, repeatable, and automated.

If you’d like, I can also:
✅ Create a PDF version with diagrams
✅ Add screenshots from OpenShift Console
✅ Include advanced topics like Jenkins pipelines with BuildConfigs

Just let me know!