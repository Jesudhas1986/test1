Important OpenShift Commands
oc get pods	List pods
oc debug pod/<pod>	Launch a debug container with pod‚Äôs context
oc describe <resource> <name>	Describe a resource
oc get svc	List services
oc get routes	List routes (URLs)
oc project	View the current project (namespace)
oc projects	List all accessible projects
oc new-project myproject	Create a new project
oc get all	List all resources in the current namespace
oc get deployment or oc get dc	List deployments or deployment configs
oc describe pod <pod>	Get detailed information about a pod
oc logs <pod>	View logs of a pod
oc get events --sort-by='.metadata.creationTimestamp'	View recent events in order
oc exec -it <pod> -- /bin/bash	Execute an interactive shell inside a pod
oc delete pod <pod>	Delete a pod
oc rollout status dc/<deployment-config>	Check rollout progress
oc rollout latest dc/<deployment-config>	Trigger a new rollout
oc create -f <file>.yaml	Create a resource from a YAML/JSON file
oc apply -f <file>.yaml	Apply changes from a YAML/JSON file
oc delete -f <file>.yaml	Delete resources defined in a file
oc edit dc <deployment-config>	Edit a deployment config in the editor
oc get configmap	List ConfigMaps
oc get secret	List secrets
oc port-forward pod/<pod> 8080:80	Forward port 80 in the pod to 8080 locally
oc get events	View recent events
oc new-app <image>	Deploy a new app using a container image
oc new-app <source-code-url>	Deploy from source
oc start-build <build-config>	Manually start a build
oc logs bc/<build-config>	View build logs
oc get builds	List all builds
oc get bc	List build configurations
oc cancel-build <build>	Cancel a running build
oc import-image <image-stream>	Force update an image stream
oc tag <source-image> <destination>	Tag images across image streams
oc get imagestreams	List image streams
oc cp <pod>:<path> <local>	Copy files from pod to local
oc cp <local> <pod>:<path>	Copy files from local to pod
oc get pod -o wide	Get detailed pod info (IP, node, etc.)
oc get pod -w	Watch for pod changes
oc set env dc/<deployment> VAR=value	Set environment variable in a deployment
oc create configmap my-config --from-literal=key=value	Create ConfigMap from key-value
oc create configmap my-config --from-file=app.conf	Create ConfigMap from file
oc create secret generic my-secret --from-literal=user=admin	Create a secret from literal value
oc create secret generic my-secret --from-file=secret.txt	Create secret from file
oc set volume dc/<dc-name> --add --name=conf-volume --mount-path=/etc/conf --configmap-name=my-config	Mount ConfigMap into pod
oc set volume dc/<dc-name> --add --name=secret-volume --mount-path=/etc/secret --secret-name=my-secret	Mount secret into pod
oc debug pod/<pod>	Launch a debug container with pod‚Äôs context
oc get <resource> -o yaml	View resource as YAML
oc get <resource> -o json	View resource as JSON
oc replace -f <file>.yaml	Replace resource using file
oc annotate <resource> key=value	Add or change annotation
oc label <resource> key=value	Add or change label
oc patch <resource> <name> -p '{...}'	Patch a resource
oc logs -f <pod>	Follow logs from a pod
oc adm top nodes	View node CPU/memory usage
oc adm top pods	View pod CPU/memory usage
oc expose svc/<service>	Create a route for a service
oc get routes	Get all routes (URLs) in project
oc delete route <route>	Delete a route
 
 
 Part 1: Create a Secret from OpenShift Console
üîπ Steps:
Login to OpenShift Web Console.

Select your Project / Namespace from the top-left corner.

On the left navigation pane, go to:
Workloads ‚Üí Secrets

Click on ‚ÄúCreate‚Äù ‚Üí ‚ÄúKey/Value Secret‚Äù

üîπ Fill the Secret Form:
Name: e.g. my-secret

Key: e.g. username

Value: e.g. admin

You can add more key-value pairs if needed.

Click Create.

‚úÖ Part 2: Mount the Secret into a Pod as a Volume
You can mount the secret into a Deployment, StatefulSet, or Pod, by editing the YAML configuration.

üîπ Example: Mount secret in a Pod YAML
yaml
Copy
Edit
apiVersion: v1
kind: Pod
metadata:
  name: secret-demo
spec:
  containers:
    - name: mycontainer
      image: nginx
      volumeMounts:
        - name: secret-volume
          mountPath: "/etc/secret-data"
          readOnly: true
  volumes:
    - name: secret-volume
      secret:
        secretName: my-secret
üìå The secret my-secret is mounted at /etc/secret-data inside the container.
Files are created for each key (username, etc.), and the values become the content of those files.



Document: Creating and Using ConfigMap in OpenShift Console
üß© Part 1: Create a ConfigMap in OpenShift Console
‚úÖ Steps:
Login to OpenShift web console.

Go to Administrator view (top left corner dropdown).

Navigate to:
Workloads ‚Üí ConfigMaps.

Click Create ConfigMap.

In the Create ConfigMap form:

Enter a name (e.g., my-configmap).

Add key-value pairs under the Data section.
Example:

makefile
Copy
Edit
key: APP_ENV
value: production
Click Create.

üß© Part 2: Refer ConfigMap in DeploymentConfig
‚úÖ Steps:
Go to Workloads ‚Üí DeploymentConfigs.

Select the DC where you want to use the ConfigMap (e.g., my-app).

Click Actions (‚ãÆ) ‚Üí Edit DeploymentConfig.

Scroll to the containers section ‚Üí click Environment tab.

In Environment Variables, click Add Value From.

Choose:

From ConfigMap

Select your ConfigMap name (my-configmap).

Select the key (APP_ENV).

Or, if you're using YAML, you can add the following under your container spec:

yaml
Copy
Edit
env:
  - name: APP_ENV
    valueFrom:
      configMapKeyRef:
        name: my-configmap
        key: APP_ENV
Click Save to apply changes.

üß™ Example: Using ConfigMap to Mount Configuration File
If your ConfigMap has a full config file (like config.json), you can mount it as a file:

1. Create the ConfigMap with file content:
bash
Copy
Edit
oc create configmap my-config --from-file=config.json
2. In YAML (DeploymentConfig), add volume and mount:
yaml
Copy
Edit
volumes:
  - name: config-volume
    configMap:
      name: my-config

containers:
  - name: my-container
    volumeMounts:
      - name: config-volume
        mountPath: /etc/config
        readOnly: true