1. From a local cloned Git repo
Use Python's built-in os or pathlib modules to walk through a directory and read files.

Example using os:
python
Copy
Edit
import os

directory_path = "/path/to/cloned/repo/some-folder"

for root, dirs, files in os.walk(directory_path):
    for file in files:
        file_path = os.path.join(root, file)
        print(f"\n--- Reading: {file_path} ---")
        with open(file_path, 'r', encoding='utf-8') as f:
            print(f.read())
üåê 2. From a remote GitHub repo (public) without cloning
You can use the GitHub API to list directory contents and read each file.

Example using GitHub API:
python
Copy
Edit
import requests

repo_owner = "username"
repo_name = "repo"
branch = "main"
path = "path/in/repo"  # Leave blank to list root directory

url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/contents/{path}?ref={branch}"

response = requests.get(url)
files = response.json()

for file in files:
    if file['type'] == 'file':
        raw_url = file['download_url']
        file_content = requests.get(raw_url).text
        print(f"\n--- {file['name']} ---\n{file_content}")
‚ö†Ô∏è This only works for public repos or private ones using a token (add headers).

üîê Optional: Read files from private repo
You‚Äôll need to authenticate with a token:

python
Copy
Edit
headers = {
    "Authorization": "Bearer YOUR_PERSONAL_ACCESS_TOKEN"
}
response = requests.get(url, headers=headers)
