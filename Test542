To set up ssh-agent so you can use ssh-add in a terminal or programmatically (like in Python), follow the steps depending on your environment.


---

🐧 Linux / 🐳 WSL / 🍏 macOS

✅ Manually in Terminal

1. Start ssh-agent:

eval "$(ssh-agent -s)"

This command will output something like:

Agent pid 12345


2. Add a private key:

ssh-add ~/.ssh/id_rsa

You can now use SSH with tools like git, scp, etc.




---

✅ In Python

You can run the above commands from Python using subprocess:

import subprocess
import os

# Start ssh-agent and capture output
agent_output = subprocess.check_output("ssh-agent -s", shell=True, text=True)

# Extract and export environment variables
for line in agent_output.splitlines():
    if line.startswith("SSH_AUTH_SOCK"):
        os.environ["SSH_AUTH_SOCK"] = line.split(";")[0].split("=")[1]
    elif line.startswith("SSH_AGENT_PID"):
        os.environ["SSH_AGENT_PID"] = line.split(";")[0].split("=")[1]

# Add key
private_key = os.path.expanduser("~/.ssh/id_rsa")
subprocess.run(["ssh-add", private_key], check=True)

print("SSH agent set and key added.")


---

🪟 Windows

If you're using:

✅ Git Bash / WSL / PowerShell with OpenSSH

1. Ensure OpenSSH Agent is running:

Run this in PowerShell:

Start-Service ssh-agent
Set-Service -Name ssh-agent -StartupType Automatic



2. Add your key:

ssh-add ~/.ssh/id_rsa




---

🔄 Auto-start on Login (Linux/macOS)

To automatically start ssh-agent and add your key on login, add this to your shell profile (~/.bashrc, ~/.zshrc, etc.):

if ! pgrep -u "$USER" ssh-agent > /dev/null; then
    eval "$(ssh-agent -s)"
    ssh-add ~/.ssh/id_rsa
fi


---

Let me know your OS or specific use case (e.g., for Git, Python subprocess, CI/CD) and I can tailor this further.

