
Here are 30 commonly asked OpenShift interview questions with answers and command examples, covering key concepts such as pods, deployments, networking, builds, and security:

1. Resource usage and quota allocation 
2. ,how to debug a pod
3. How to find deployment failure 
4. How to rollback deployment 
5. What is difference between deplyand deployment config 
5. How to save log file
6. How to mount a configuration file
6. How to manage a secret 
7 how to create new project i
OC new-project
8. How to create new app
 OC new-app
9. To check statusof deployed app
OC status 
10. How to create route for your application 
OC expose 
12 how to import existing image in 
OC inport-imahe
13. How to create secret
OC create secret 
14. How to create pvx
OC apply -f .yaml
15. How to get details of a resource 
OC describe
16. How to set resource limit
OC set resources dc limits 
17. Check history deploymentz
OC rollout history dc
18 how to rollback
OC rollback --to-revision
19
 How to track all events 
20 resource usage 
OC adm resources 


---

✅ 1. What is OpenShift?

Answer:
OpenShift is a Kubernetes-based container platform developed by Red Hat that provides developer and operational tools for building, deploying, and managing containerized applications.


---

✅ 2. How do you log in to an OpenShift cluster?

Command:

oc login https://<openshift-api-url> --token=<token>


---

✅ 3. How do you list all projects/namespaces?

Command:

oc get projects


---

✅ 4. How do you switch to a different project?

Command:

oc project <project-name>


---

✅ 5. How do you create a new project?

Command:

oc new-project <project-name>


---

✅ 6. What is a Pod in OpenShift?

Answer:
A Pod is the smallest deployable unit that contains one or more containers that share storage, network, and a specification.


---

✅ 7. How do you list all pods in a project?

Command:

oc get pods


---

✅ 8. How do you describe a pod?

Command:

oc describe pod <pod-name>


---

✅ 9. How do you view logs from a pod?

Command:

oc logs <pod-name>


---

✅ 10. How do you execute a command inside a running pod?

Command:

oc exec -it <pod-name> -- /bin/bash


---

✅ 11. What is a DeploymentConfig in OpenShift?

Answer:
DeploymentConfig is an OpenShift-specific object that defines how an application is deployed and managed. It provides more features than Kubernetes Deployment, like triggers.


---

✅ 12. How do you create a new app in OpenShift?

Command:

oc new-app <image|template|code>


---

✅ 13. How do you expose a service to create a route?

Command:

oc expose svc/<service-name>


---

✅ 14. How do you scale a deployment in OpenShift?

Command:

oc scale --replicas=3 deployment/<deployment-name>


---

✅ 15. How do you create a secret?

Command:

oc create secret generic mysecret --from-literal=username=admin --from-literal=password=redhat


---

✅ 16. How do you link a secret to a deployment?

Command:

oc set volume dc/<dc-name> --add --name=mysecret-volume --secret-name=mysecret --mount-path=/etc/secret


---

✅ 17. What are ImageStreams?

Answer:
ImageStreams track changes in container images and can trigger new builds or deployments when a new image is detected.


---

✅ 18. How do you start a build manually?

Command:

oc start-build <buildconfig-name>


---

✅ 19. How do you create a config map?

Command:

oc create configmap myconfig --from-literal=APP_ENV=prod


---

✅ 20. How do you mount a config map to a pod?

Command:

oc set volume dc/<dc-name> --add --name=config-vol --mount-path=/etc/config --configmap-name=myconfig


---

✅ 21. How do you rollback a deployment?

Command:

oc rollback <dc-name>


---

✅ 22. How do you delete a resource?

Command:

oc delete <resource-type> <resource-name>

Example:

oc delete pod mypod


---

✅ 23. How do you monitor OpenShift logs?

Command:

oc logs -f <pod-name>


---

✅ 24. How do you check the OpenShift version?

Command:

oc version


---

✅ 25. How do you get the route URL for a service?

Command:

oc get route


---

✅ 26. What is the difference between Deployment and DeploymentConfig?

Answer:

Deployment: Kubernetes-native way to manage applications.

DeploymentConfig: OpenShift-specific and supports custom triggers like image change or config change.



---

✅ 27. How do you label a pod or deployment?

Command:

oc label pod <pod-name> app=frontend


---

✅ 28. How do you apply a YAML configuration file?

Command:

oc apply -f <filename>.yaml


---

✅ 29. How do you check events in OpenShift?

Command:

oc get events


---

✅ 30. How do you check which node a pod is running on?

Command:

oc get pod <pod-name> -o wide


---

If you want advanced-level or scenario-based questions as well (e.g., related to networking, RBAC, monitoring, CI/CD), let me know.



Login to OpenShift cluster
oc login https://<cluster-url> --token=<your-token>


List all projects]
oc get projects

Create a new project
oc new-project <project-name>


Delete a project
oc delete project <project-name>

List all pods in all namespaces
oc get pods --all-namespaces


Describe a pod
oc describe pod <pod-name>

Get logs of a pod
oc logs <pod-name>

Execute into a running pod

oc exec -it <pod-name> -- /bin/bash

Force delete a pod
oc delete pod <pod-name> --grace-period=0 --force

Start a build manually
oc start-build <build-config-name>


View build logs
oc logs build/<build-name>

Create a deployment from an image
oc new-app <image-name>

Trigger a rollout restart
oc rollout restart deployment/<deployment-name>

Check rollout status
oc rollout status deployment/<deployment-name>


Expose a service as a route
oc expose svc/<service-name>

Port-forward local port to pod
oc port-forward pod/<pod-name> 8080:80


List all secrets
oc get secrets

Create secret from literals
oc create secret generic my-secret --from-literal=username=admin --from-literal=password=pass123

Decode a secret
oc get secret my-secret -o jsonpath='{.data.password}' | base64 --decode

Create ConfigMap from file
oc create configmap my-config --from-file=config.txt

Mount ConfigMap in pod (in YAML)
volumeMounts:
  - name: config-volume
    mountPath: /etc/config
volumes:
  - name: config-volume
    configMap:
      name: my-config
 
 
Get deployment
oc get deployment

Scale a deployment to 3 replicas
oc scale deployment/<deployment-name> --replicas=3


Autoscale a deployment
oc autoscale deployment/<deployment-name> --min=1 --max=5 --cpu-percent=80

Tail logs of a pod
oc logs -f <pod-name>


Get events for debugging
oc get events

Check resource usage (CPU/Memory)
oc adm top pods

Run diagnostic on cluster
oc adm diagnostics

Check node status
oc get nodes

List imagestreams
oc get is

Import an image into imagestream
oc import-image my-image --from=docker.io/nginx --confirm

View available templates
oc get templates





Show quoted text
You said:
wkhtmltopdf library how to upgrade to openssl latest version


ChatGPT said:
To upgrade wkhtmltopdf to use the latest OpenSSL version, you'll typically need to build it from source, because precompiled binaries often ship with an older static OpenSSL version (e.g., OpenSSL 1.0.2).

Here’s a step-by-step guide to build wkhtmltopdf with the latest OpenSSL:

✅ Step 1: Install Dependencies
Install the required libraries and tools:

For RHEL/CentOS:
bash
Copy
Edit
sudo yum groupinstall "Development Tools"
sudo yum install openssl-devel zlib-devel libjpeg-devel xorg-x11-server-Xvfb qt5-qtbase-devel qt5-qtwebkit-devel qt5-qtsvg-devel git
For Ubuntu/Debian:
bash
Copy
Edit
sudo apt update
sudo apt install build-essential openssl libssl-dev zlib1g-dev libjpeg-dev libxrender-dev libx11-dev libxext-dev qtbase5-dev qtdeclarative5-dev libqt5webkit5-dev git
✅ Step 2: Download Latest OpenSSL & Build It
bash
Copy
Edit
cd /usr/local/src
sudo wget https://www.openssl.org/source/openssl-3.3.1.tar.gz
sudo tar -xvzf openssl-3.3.1.tar.gz
cd openssl-3.3.1
sudo ./config --prefix=/opt/openssl --openssldir=/opt/openssl
sudo make -j$(nproc)
sudo make install
Then export this OpenSSL path:

bash
Copy
Edit
export PATH=/opt/openssl/bin:$PATH
export LD_LIBRARY_PATH=/opt/openssl/lib:$LD_LIBRARY_PATH
✅ Step 3: Clone and Build wkhtmltopdf from Source
bash
Copy
Edit
cd ~
git clone https://github.com/wkhtmltopdf/wkhtmltopdf.git
cd wkhtmltopdf
git submodule update --init --recursive
Configure with your OpenSSL path:
bash
Copy
Edit
cmake . -DCMAKE_BUILD_TYPE=Release -DOPENSSL_ROOT_DIR=/opt/openssl
make -j$(nproc)
✅ Step 4: Confirm OpenSSL Linkage
After build completes, check which OpenSSL version is linked:

bash
Copy
Edit
ldd bin/wkhtmltopdf | grep ssl
You should see it linked to /opt/openssl/lib/libssl.so.

✅ Step 5: Install (Optional)
bash
Copy
Edit
sudo cp bin/wkhtmltopdf /usr/local/bin/
🧩 Notes:
Most wkhtmltopdf prebuilt binaries are bundled with Qt 4 and OpenSSL 1.0.2, so building from source is the only way to upgrade libraries.

If you use Docker, consider using a Dockerfile to automate this with a base image like ubuntu:22.04.

Would you like a Dockerfile example or help troubleshooting build errors?








You said:
give me explanation for each of these command


ChatGPT said:
Sure! Here's a detailed explanation of each command used in the process of building wkhtmltopdf with the latest OpenSSL version:

🔹 Install Dependencies
RHEL/CentOS:
bash
Copy
Edit
sudo yum groupinstall "Development Tools"
Installs a full set of tools needed for compiling software (like gcc, make, etc.).

bash
Copy
Edit
sudo yum install openssl-devel zlib-devel libjpeg-devel xorg-x11-server-Xvfb qt5-qtbase-devel qt5-qtwebkit-devel qt5-qtsvg-devel git
Installs development libraries needed to build wkhtmltopdf, including:

openssl-devel: OpenSSL headers and static libraries.

zlib-devel, libjpeg-devel: Compression and image support.

qt5-*: Qt5 libraries for GUI/WebKit rendering.

git: To clone the wkhtmltopdf source.

Ubuntu/Debian:
bash
Copy
Edit
sudo apt update
Refreshes the package list from repositories.

bash
Copy
Edit
sudo apt install build-essential openssl libssl-dev zlib1g-dev libjpeg-dev libxrender-dev libx11-dev libxext-dev qtbase5-dev qtdeclarative5-dev libqt5webkit5-dev git
Similar to above, installs:

build-essential: Compiler tools (gcc, g++, make, etc.).

libssl-dev: OpenSSL development files.

Qt5-related development libraries.

Git for cloning source code.

🔹 Download & Build OpenSSL from Source
bash
Copy
Edit
cd /usr/local/src
Navigates to the source directory where we'll download OpenSSL.

bash
Copy
Edit
sudo wget https://www.openssl.org/source/openssl-3.3.1.tar.gz
Downloads the latest stable OpenSSL source tarball.

bash
Copy
Edit
sudo tar -xvzf openssl-3.3.1.tar.gz
Extracts the tarball contents.

bash
Copy
Edit
cd openssl-3.3.1
Changes into the OpenSSL source directory.

bash
Copy
Edit
sudo ./config --prefix=/opt/openssl --openssldir=/opt/openssl
Configures OpenSSL to be installed in /opt/openssl (so it doesn't interfere with system OpenSSL).

bash
Copy
Edit
sudo make -j$(nproc)
Compiles OpenSSL using all available CPU cores ($(nproc) gives core count).

bash
Copy
Edit
sudo make install
Installs OpenSSL to /opt/openssl.

🔹 Set OpenSSL Path
bash
Copy
Edit
export PATH=/opt/openssl/bin:$PATH
Adds new OpenSSL binaries to your shell path (so it's used by default).

bash
Copy
Edit
export LD_LIBRARY_PATH=/opt/openssl/lib:$LD_LIBRARY_PATH
Tells the dynamic linker to use the OpenSSL libraries from /opt/openssl/lib.

🔹 Clone & Build wkhtmltopdf
bash
Copy
Edit
cd ~
Go to the home directory.

bash
Copy
Edit
git clone https://github.com/wkhtmltopdf/wkhtmltopdf.git
Clones the official wkhtmltopdf source code.

bash
Copy
Edit
cd wkhtmltopdf
Changes to the cloned project directory.

bash
Copy
Edit
git submodule update --init --recursive
Initializes and pulls all submodules used by the project (especially Qt source).

🔹 Build wkhtmltopdf with Custom OpenSSL
bash
Copy
Edit
cmake . -DCMAKE_BUILD_TYPE=Release -DOPENSSL_ROOT_DIR=/opt/openssl
Configures the build with:

Release mode (for optimized binary).

OPENSSL_ROOT_DIR: Points to the OpenSSL you just built.

bash
Copy
Edit
make -j$(nproc)
Compiles the project using all CPU cores for speed.

🔹 Check OpenSSL Linkage
bash
Copy
Edit
ldd bin/wkhtmltopdf | grep ssl
Verifies that the resulting binary is using your newly built OpenSSL library by checking linked .so files.

🔹 Install the Binary
bash
Copy
Edit
sudo cp bin/wkhtmltopdf /usr/local/bin/
Copies the built binary to a system-wide path so it can be run globally via wkhtmltopdf.

✅ Summary:
You're compiling wkhtmltopdf from source with your own custom-built OpenSSL 3.x, avoiding system defaults (which are usually outdated). This ensures better security, compliance, or compatibility with modern HTTPS/TLS standards.

Would you like a Dockerfile for this process or a script to automate it?








You said:
what if I dont have access to sudo


ChatGPT said:
If you don’t have sudo access, you can still build and use wkhtmltopdf with the latest OpenSSL — but everything will have to be installed under your home directory.

Here’s how you can do it without sudo:

✅ High-Level Plan (No sudo Required)
Build and install OpenSSL in your home directory

Set environment variables to use your OpenSSL version

Build wkhtmltopdf in your home directory using your OpenSSL

Run wkhtmltopdf from your build path

🔧 Step-by-Step: No Sudo
🥇 1. Create a local install directory
bash
Copy
Edit
mkdir -p $HOME/local/openssl
mkdir -p $HOME/build
cd $HOME/build
🥈 2. Build and install OpenSSL (in your home directory)
bash
Copy
Edit
wget https://www.openssl.org/source/openssl-3.3.1.tar.gz
tar -xvzf openssl-3.3.1.tar.gz
cd openssl-3.3.1

./config --prefix=$HOME/local/openssl --openssldir=$HOME/local/openssl
make -j$(nproc)
make install
🥉 3. Set your environment variables
bash
Copy
Edit
export PATH=$HOME/local/openssl/bin:$PATH
export LD_LIBRARY_PATH=$HOME/local/openssl/lib:$LD_LIBRARY_PATH
export PKG_CONFIG_PATH=$HOME/local/openssl/lib/pkgconfig:$PKG_CONFIG_PATH
You can also add these to your ~/.bashrc or ~/.bash_profile to make it permanent.

🏗️ 4. Build wkhtmltopdf using your OpenSSL
Clone the source
bash
Copy
Edit
cd $HOME/build
git clone https://github.com/wkhtmltopdf/wkhtmltopdf.git
cd wkhtmltopdf
git submodule update --init --recursive
Run cmake with your OpenSSL path:
bash
Copy
Edit
cmake . -DCMAKE_BUILD_TYPE=Release -DOPENSSL_ROOT_DIR=$HOME/local/openssl
make -j$(nproc)
This builds wkhtmltopdf in your current directory.

✅ 5. Run wkhtmltopdf locally
bash
Copy
Edit
./bin/wkhtmltopdf https://example.com output.pdf
You can optionally add an alias:

bash
Copy
Edit
alias wkhtmltopdf="$HOME/build/wkhtmltopdf/bin/wkhtmltopdf"
🔍 Verify OpenSSL Version Used
bash
Copy
Edit
ldd ./bin/wkhtmltopdf | grep ssl
This should point to your $HOME/local/openssl/lib/libssl.so.

🧩 Notes
You don't need root/sudo as long as you're building and using things in your user space.

Some build tools like qt5 can be tricky. If you face missing dependency errors, you might need to build Qt as well (let me know — I can guide you through that too).

If cmake or Qt5 is not available and can't be installed, using a Docker container or precompiled static binaries in a sandboxed environment might be a better choice.

Show quoted text
